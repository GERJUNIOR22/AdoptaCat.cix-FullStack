# üîß Script de Diagn√≥stico - Error de Conexi√≥n Formulario

Write-Host "üîç Iniciando diagn√≥stico del error de conexi√≥n..." -ForegroundColor Yellow

## 1. Verificar Backend
Write-Host "`n1Ô∏è‚É£ Verificando Backend..." -ForegroundColor Cyan

# Verificar si el puerto 8080 est√° en uso
$backendProcess = Get-NetTCPConnection -LocalPort 8080 -ErrorAction SilentlyContinue
if ($backendProcess) {
    Write-Host "‚úÖ Backend corriendo en puerto 8080" -ForegroundColor Green
} else {
    Write-Host "‚ùå Backend NO est√° corriendo en puerto 8080" -ForegroundColor Red
    Write-Host "üí° Inicia el backend con: cd backend && .\mvnw.cmd spring-boot:run" -ForegroundColor Yellow
    exit 1
}

## 2. Probar conectividad b√°sica
Write-Host "`n2Ô∏è‚É£ Probando conectividad b√°sica..." -ForegroundColor Cyan

try {
    $healthResponse = Invoke-RestMethod -Uri "http://localhost:8080/actuator/health" -Method GET -TimeoutSec 5
    Write-Host "‚úÖ Health check exitoso: $($healthResponse.status)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Health check fall√≥: $($_.Exception.Message)" -ForegroundColor Red
}

## 3. Probar endpoint de adopci√≥n
Write-Host "`n3Ô∏è‚É£ Probando endpoint de adopci√≥n..." -ForegroundColor Cyan

try {
    $testResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/adoption-profiles/test" -Method GET -TimeoutSec 5
    Write-Host "‚úÖ Endpoint de adopci√≥n accesible: $($testResponse.message)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Endpoint de adopci√≥n fall√≥: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "üí° Revisar logs del backend para m√°s detalles" -ForegroundColor Yellow
}

## 4. Verificar Frontend
Write-Host "`n4Ô∏è‚É£ Verificando Frontend..." -ForegroundColor Cyan

$frontendProcess = Get-NetTCPConnection -LocalPort 4200 -ErrorAction SilentlyContinue
if ($frontendProcess) {
    Write-Host "‚úÖ Frontend corriendo en puerto 4200" -ForegroundColor Green
} else {
    Write-Host "‚ùå Frontend NO est√° corriendo en puerto 4200" -ForegroundColor Red
    Write-Host "üí° Inicia el frontend con: cd frontend && npm start" -ForegroundColor Yellow
}

## 5. Probar env√≠o de datos
Write-Host "`n5Ô∏è‚É£ Probando env√≠o de datos simulado..." -ForegroundColor Cyan

$testData = @{
    nombreCompleto = "Test Usuario"
    correoElectronico = "test@example.com"
    celular = "987654321"
    dni = "12345678"
    estadoCivil = "Soltero"
    direccion = "Test Address"
    distrito = "Test District"
    porqueAdoptar = "Test reason"
    cuantasPersonasCasa = 2
    todosAcuerdan = $true
    aceptoCondiciones = $true
} | ConvertTo-Json

try {
    $testPost = Invoke-RestMethod -Uri "http://localhost:8080/api/adoption-profiles" -Method POST -Body $testData -ContentType "application/json" -TimeoutSec 10
    Write-Host "‚úÖ Env√≠o de datos simulado exitoso: $($testPost.message)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Env√≠o de datos fall√≥: $($_.Exception.Message)" -ForegroundColor Red
    if ($_.Exception.Response) {
        $statusCode = $_.Exception.Response.StatusCode
        Write-Host "üìä Status Code: $statusCode" -ForegroundColor Yellow
        
        if ($statusCode -eq 400) {
            Write-Host "üí° Error 400: Problema con validaci√≥n de datos" -ForegroundColor Yellow
        } elseif ($statusCode -eq 500) {
            Write-Host "üí° Error 500: Problema interno del servidor" -ForegroundColor Yellow
        }
    }
}

Write-Host "`nüéØ Diagn√≥stico completado" -ForegroundColor Green
Write-Host "üí° Si hay errores, revisar:" -ForegroundColor Yellow
Write-Host "   - Logs del backend (consola donde corre Spring Boot)" -ForegroundColor White
Write-Host "   - DevTools del navegador (F12 ‚Üí Console ‚Üí Network)" -ForegroundColor White
Write-Host "   - Variables de entorno de MySQL" -ForegroundColor White